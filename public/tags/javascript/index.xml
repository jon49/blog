<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on JNyman.com</title>
    <link>http://jnyman.com/tags/javascript/</link>
    <description>Recent content in Javascript on JNyman.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 21 Jun 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://jnyman.com/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using NPM as a Build Tool</title>
      <link>http://jnyman.com/2016/06/21/npm_as_build_tool/</link>
      <pubDate>Tue, 21 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://jnyman.com/2016/06/21/npm_as_build_tool/</guid>
      <description>I really like simplicity. The tools I use, I like them to make my life easy, not hard. They need to work out of the box. No huge configuration settings, just make it easy so I can get to work.
Well, along come grunt, gulp, and now even more tools since I first started writing this that I won&amp;rsquo;t mention. Two build tools for JavaScript. Wonderful, we need tools to help us build our files.</description>
    </item>
    
    <item>
      <title>On-the-Fly Lambda Expressions in JavaScript</title>
      <link>http://jnyman.com/2016/06/13/lambda_expressions_in_javascript/</link>
      <pubDate>Mon, 13 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://jnyman.com/2016/06/13/lambda_expressions_in_javascript/</guid>
      <description>Before many of the JavaScript compilers became real popular and if you wanted to write in straight JavaScript you could create functions on the fly. This was really nice for doing lambda functions.
Here&amp;rsquo;s a couple libraries that did this.
https://github.com/fschaefer/Lambda.js https://github.com/dfellis/lambda-js
Here&amp;rsquo;s how it basically worked:
var f = function(func){ var funcArray = func.split(&#39;-&amp;gt;&#39;) return (funcArray.length === 1) ? new Function(&#39;x&#39;, &#39;return (&#39; + funcArray[0].trim() + &#39;)&#39;) : new Function(funcArray[0].</description>
    </item>
    
    <item>
      <title>bilby.js &amp; lenses</title>
      <link>http://jnyman.com/2014/07/01/bilbyjs_lenses/</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://jnyman.com/2014/07/01/bilbyjs_lenses/</guid>
      <description>In JavaScript nearly everything is mutable. This can cause problems in your code when you think you have a new object or variable but instead you are operating on the referenced object. So, we create patterns to alleviate this problem. Or we use libraries like underscore.js or lodash.js which incorporate the functional concepts. Unfortunately they don&amp;rsquo;t always use immutable objects either.
Bilby.js solves the mutability problem by using lenses. Using the lenses pattern one can access and change one&amp;rsquo;s objects in a safe and immutable manner.</description>
    </item>
    
    <item>
      <title>JavaScript</title>
      <link>http://jnyman.com/2014/06/07/javascript/</link>
      <pubDate>Sat, 07 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://jnyman.com/2014/06/07/javascript/</guid>
      <description>I’ve jumped ship from Excel programming over to JavaScript (in a functional manner). I’ve also gone the way of Linux away from Windows. I love Excel and its power. But I see the writing on the wall and am moving to where I can hopefully get some work and starting making some moolah. You can follow my new blog over at http://thisisafiller.ghoster.io/.
If anyone is interested in the products I’ve made let me know how you like them and send me an e-mail.</description>
    </item>
    
  </channel>
</rss>
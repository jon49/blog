<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Functional Programming on JNyman.com</title>
    <link>http://jnyman.com/tags/functional-programming/</link>
    <description>Recent content in Functional Programming on JNyman.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Jun 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://jnyman.com/tags/functional-programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>An Introduction to Functional Programming in JavaScript</title>
      <link>http://jnyman.com/2017/06/01/functional_js_talk/</link>
      <pubDate>Thu, 01 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://jnyman.com/2017/06/01/functional_js_talk/</guid>
      <description>This is the talk I gave at the JavaScript meetup in Phoenix. One the othe largest programming meetups in the valley.
Here are the slides to the talk.
 Here&amp;rsquo;s some books that can help you get ramped up into the functional programming paradigm Introducing functional programming with Underscore.js by Michael Fogus. And for a more in depth look into functional patterns Professor Frisby’s Mostly Adequate Guide to Functional Programming.</description>
    </item>
    
    <item>
      <title>bilby.js &amp; lenses</title>
      <link>http://jnyman.com/2014/07/01/bilbyjs_lenses/</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://jnyman.com/2014/07/01/bilbyjs_lenses/</guid>
      <description>In JavaScript nearly everything is mutable. This can cause problems in your code when you think you have a new object or variable but instead you are operating on the referenced object. So, we create patterns to alleviate this problem. Or we use libraries like underscore.js or lodash.js which incorporate the functional concepts. Unfortunately they don&amp;rsquo;t always use immutable objects either.
Bilby.js solves the mutability problem by using lenses. Using the lenses pattern one can access and change one&amp;rsquo;s objects in a safe and immutable manner.</description>
    </item>
    
    <item>
      <title>Match Expression for JavaScript?</title>
      <link>http://jnyman.com/2014/06/20/match_expression_javascript/</link>
      <pubDate>Fri, 20 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://jnyman.com/2014/06/20/match_expression_javascript/</guid>
      <description>Sometimes (or rather most of the time) it would be nice to have more concise code in JavaScript. I was working with a function that needed quite a bit of if statements. if was awfully cluttered. I had looked at bilby.js examples and hadn&amp;rsquo;t realized that you can do multiple ternary expressions in a row.
So, instead of,
if (0){ return 0 } else if (1){ if (2) { return 1 } else if (3) { return 2 } else { return 3 } } else { return 4 }  You can do,</description>
    </item>
    
    <item>
      <title>Prototypes &amp; Compositions with Objects</title>
      <link>http://jnyman.com/2014/06/04/prototypes_composition_with_objects/</link>
      <pubDate>Wed, 04 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://jnyman.com/2014/06/04/prototypes_composition_with_objects/</guid>
      <description>I was trying to figure out the best way to have functions be both compatible with an object oriented paradigm and a functional oriented paradigm when working on objects. My implementations are probably naive, but instructive nevertheless. It seems that lo-dash and other libraries have done a good job bridging those worlds.
Let&amp;rsquo;s say you have an object O such that
function O(a, b){ this.a = a this.b = b } var o = function(a, b){ return new O(a, b) }  Now, you want to extend the object but you also want the option to use the object in a more fuctional way with compose.</description>
    </item>
    
    <item>
      <title>Functional Immutability in JavaScript</title>
      <link>http://jnyman.com/2014/05/29/functional_immutability_in_javascript/</link>
      <pubDate>Thu, 29 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://jnyman.com/2014/05/29/functional_immutability_in_javascript/</guid>
      <description>This is taken from Michael Fogus&amp;rsquo; book Functional JavaScript in the chapter Purity, Immutability, and Policies for Change.
Immutability is impossible to achieve in JavaScript without using Object.freeze but it only performs makes the object immutable shallowing, you have to roll your own deepFreeze if you would like to make the object truly immutable.
So there are some practices you can do to make your functions and variables perform in a more immutable manner.</description>
    </item>
    
    <item>
      <title>Functional or Object Oriented JavaScript?</title>
      <link>http://jnyman.com/2014/05/29/functional_or_oo_javascript/</link>
      <pubDate>Thu, 29 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://jnyman.com/2014/05/29/functional_or_oo_javascript/</guid>
      <description>When people are first exposed to JavaScript and its minimal set of tools (functions, objects, prototypes, and arrays), many are underwhelmed. Therefore, in order to “modify” JavaScript to conform to their idea of what it takes to model software solutions, they very often seek out or re-create class-based systems using the primordial ooze.
- Michael Fogus Functional Programming
 Of course, the next sentence he softens that quote, I just enjoyed the first part though.</description>
    </item>
    
    <item>
      <title>Notes on Monads, Monoids, and Make Believe</title>
      <link>http://jnyman.com/2014/05/15/monads_monoids_and_make_believe_brian_lonsdorf/</link>
      <pubDate>Thu, 15 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://jnyman.com/2014/05/15/monads_monoids_and_make_believe_brian_lonsdorf/</guid>
      <description>with Brian Lonsdorf Working with Objects the better way var SSN = Constructor(function(number, current_user){ this.number = number this.user = current_user }) SSN.prototype = { fmap: function(f){ if(this.user.is_admin) return SSN(f(this.number), this.user) } } social.fmap(replace(&#39;-&#39;, &#39;&#39;)) //=&amp;gt; SSN(&#39;123456789&#39;, user) social.fmap(function(number){return number.reverse()}) //=&amp;gt; SSN(&#39;1234-56-789&#39;, user)  the functor way Note: Functor function defined.
var AdminAccess = Constructor(function(val, current_user){ this.val = val this.user = current_user }) Functor(AdminAccess, { fmap: function(f){ if(this.user.is_admin) return AdminAccess(f(this.val), this.</description>
    </item>
    
    <item>
      <title>Notes On Functional Programming</title>
      <link>http://jnyman.com/2014/05/13/functional_programming_for_non_mathematicians/</link>
      <pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://jnyman.com/2014/05/13/functional_programming_for_non_mathematicians/</guid>
      <description>Patterns for the Non-Mathematician with Brian Lonsdorf Lenses Using lenses for composable/polymorphic model manipulation.
E.g.,
var user = {id:1, name:{first:&#39;doris&#39;, last:&#39;day&#39;}} var L = makeLenses([&#39;name&#39;, &#39;first&#39;]) var firstNameChar = compose(L.name, L.first, _1) over(firstNameChar, toUpperCase, user) //=&amp;gt; {id:1, name:{first:&#39;Doris&#39;, last:&#39;day&#39;}}  Maybe Use Maybe (Haskell) types (Option types in bilby.js / Scala style) to make composition easier. This works with fmap (functor maps). Returns resultant option.
Error Handling (Either) Either(&#39;need an int&#39;, 3) //=&amp;gt; Right(3) Either(&#39;need an int&#39;, undefined) //=&amp;gt; Left(&#39;need an int&#39;) fmap(function(x){return x+1;}, Right(2)) //=&amp;gt; Right(3) fmap(function(x){return x+1;}, Left(&#39;need an int&#39;)) //=&amp;gt; Left(&#39;need an int&#39;) compose(fmap(f), Either(error))  Future Values I&amp;rsquo;ll have to come back to this one later when I use it more.</description>
    </item>
    
    <item>
      <title>bilby.js &amp; functional programming</title>
      <link>http://jnyman.com/2014/05/13/bilby_functional_programming/</link>
      <pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://jnyman.com/2014/05/13/bilby_functional_programming/</guid>
      <description>I&amp;rsquo;ve been learning functional programming for quite some time and like the programming paradigm. But, it can be difficult sometimes. Some libraries like lodash.js can be easy to start learning, but others like bilby.js require that you understand more of the functional approach. So, here are some videos that have helped me understand bilby.js better.
This one gives a quick overview. Note that Maybe (Haskell) is similar to Option (Scala)</description>
    </item>
    
  </channel>
</rss>
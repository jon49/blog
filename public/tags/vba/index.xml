<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vba on JNyman.com</title>
    <link>http://jnyman.com/tags/vba/</link>
    <description>Recent content in Vba on JNyman.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 07 Jun 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://jnyman.com/tags/vba/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JavaScript</title>
      <link>http://jnyman.com/2014/06/07/javascript/</link>
      <pubDate>Sat, 07 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://jnyman.com/2014/06/07/javascript/</guid>
      <description>Iâ€™ve jumped ship from Excel programming over to JavaScript (in a functional manner). Iâ€™ve also gone the way of Linux away from Windows. I love Excel and its power. But I see the writing on the wall and am moving to where I can hopefully get some work and starting making some moolah. You can follow my new blog over at http://thisisafiller.ghoster.io/.
If anyone is interested in the products Iâ€™ve made let me know how you like them and send me an e-mail.</description>
    </item>
    
    <item>
      <title>Bit Torrent Sync &amp; Updating/Installing Programs</title>
      <link>http://jnyman.com/2013/09/30/bit_torrent_sync_updatinginsstalling_programs/</link>
      <pubDate>Mon, 30 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://jnyman.com/2013/09/30/bit_torrent_sync_updatinginsstalling_programs/</guid>
      <description>Bit Torrent SyncÂ (BT Sync) is great software which can be used for syncing files. I use it for backing up all my pictures/videos/music/files/mobile computers. Well, I did some testing and it looks like it can be used for installing and updating software also.
I tested it with my Windows 8 computer over to my Windows XP computer. I created an Excel xla add-in file and I also created an executable file.</description>
    </item>
    
    <item>
      <title>Zipping Files with VBA and USB Drives</title>
      <link>http://jnyman.com/2013/08/19/zipping_files_with_vba_and_usb_drives/</link>
      <pubDate>Mon, 19 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://jnyman.com/2013/08/19/zipping_files_with_vba_and_usb_drives/</guid>
      <description>I used Ron de Bruin&amp;rsquo;s file zipping (and sending) code with Excel. It works great with a few tweaks. Unfortunately when someone is using a USB drive with their workbook on it it fails to work. So warning: Make sure the users are using it on the main computer when trouble shooting!</description>
    </item>
    
    <item>
      <title>SUMIFS vs MATCH &amp; INDEX</title>
      <link>http://jnyman.com/2013/03/14/sumifs_vs_match_index/</link>
      <pubDate>Thu, 14 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://jnyman.com/2013/03/14/sumifs_vs_match_index/</guid>
      <description>I have one Time Card template setup with SUMIFS (used for Excel 2007 and above templates) and one set up with MATCH/INDEX (used for my 2003 and below templates). I tested the calculation speeds for each in Excel 2013 (preview) on Windows 8.
Hereâ€™s the VBA test code:
Sub test() Dim dTimer As Double Dim iLoops As Integer, iTotalIterations As Integer Dim wksStage As Worksheet Set wksStage = ThisWorkbook.Worksheets(&amp;quot;Staging Area&amp;quot;) iTotalIterations = 1 dTimer = Timer() For iLoops = 0 To iTotalIterations wksStage.</description>
    </item>
    
    <item>
      <title>Max Write to Excel (2003) in Array</title>
      <link>http://jnyman.com/2013/01/01/max_write_to_excel_2003_in_array/</link>
      <pubDate>Tue, 01 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>http://jnyman.com/2013/01/01/max_write_to_excel_2003_in_array/</guid>
      <description>I normally donâ€™t deal with very long strings. But Iâ€™m working on a project that requires storing a text file in Excel that I can later access (it would be nice just to embed it but Excel doesnâ€™t like viruses â€“ which makes me have to just store it in a worksheet).
So what is the max string length in an array write to an Excel range?
911
Seems kind of random but that is the number.</description>
    </item>
    
    <item>
      <title>List of Excel Functions - Code To Use List</title>
      <link>http://jnyman.com/2012/12/05/list_of_excel_functions_code_to_use_list/</link>
      <pubDate>Wed, 05 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>http://jnyman.com/2012/12/05/list_of_excel_functions_code_to_use_list/</guid>
      <description>I saw a few people were downloading my list of Excel functions that I created. I thought it might be useful show the code that I use to get that data to a manageable format. Although the code is written in VB.NET it should be easily converted to VBA.
[wpdm_file id=3]
I use a simple structure (type in VBA) for the data.
Private Structure ExcelFunctionInfo Dim Name As String Dim Category As String Dim ExcelVersion As Integer Dim Description As String Dim Syntax As String Dim URL As String End Structure  I then just loop through the data in the string that was gotten from the text file.</description>
    </item>
    
    <item>
      <title>Sheet Exists</title>
      <link>http://jnyman.com/2012/09/13/sheet_exists/</link>
      <pubDate>Thu, 13 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://jnyman.com/2012/09/13/sheet_exists/</guid>
      <description>I was looking at Siddharth Rout&amp;rsquo;s new blog (Adding/Deleting Sheets to the Excel File) and realized that I haven&amp;rsquo;t posted my version of sheet exists. Mine probably does too much per Code Complete standards, but it is nice not to have to think of multiple.
If I were to refactor this code I would take out the code for the charts and probably just make it work only for checking if the sheet exists and adding a new sheet if it doesn&amp;rsquo;t.</description>
    </item>
    
    <item>
      <title>Creating a Settings Class in VBA</title>
      <link>http://jnyman.com/2012/02/29/creating_a_settings_class_in_vba/</link>
      <pubDate>Wed, 29 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>http://jnyman.com/2012/02/29/creating_a_settings_class_in_vba/</guid>
      <description>In .NET they have a nice settings class you can create using ApplicationSettingsBase base class. In VBA it takes a bit more work to get it working, but can be fairly elegant if done correctly.
Some criteria that is needed for a settings class in vba are:  Well formed Fast lookup Default setting Single input/output procedures.  To make it well formed I used an enumeration variable type to create each setting.</description>
    </item>
    
    <item>
      <title>AdvancedFilter Class Part 2</title>
      <link>http://jnyman.com/2012/02/15/advancedfilter_class_part_2_determining_what_options_we_want/</link>
      <pubDate>Wed, 15 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>http://jnyman.com/2012/02/15/advancedfilter_class_part_2_determining_what_options_we_want/</guid>
      <description>The first thing weâ€™ll want to do is determine what macro options we would like in the class.
The options I currently have are:
 Range to filter (optional â€“ can use current range instead). Filter location (optional â€“ if you are using an add-in then you can place in there, otherwise can put in temporary sheet). Filter action (copy to new range or filter in place (default)). Get unique items from a column (will need to use different method than AdvancedFilter).</description>
    </item>
    
    <item>
      <title>Wrapping a Class Around the AdvancedFilter Method</title>
      <link>http://jnyman.com/2012/02/10/wrapping_a_class_around_the_advancedfilter_method/</link>
      <pubDate>Fri, 10 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>http://jnyman.com/2012/02/10/wrapping_a_class_around_the_advancedfilter_method/</guid>
      <description>Classes are a tool in object-oriented programming that make programming much simpler. One class that I have developed in VBA is a class that makes using the AdvancedFilter method extremely easy and useful. In fact, I like it so much that I stopped using the regular find method. In the coming weeks I will demonstrate how this was done.
Â This is how the AdvancedFilter method works:  Â Use a predefined range to filter.</description>
    </item>
    
    <item>
      <title>Range Address from Number to Letter</title>
      <link>http://jnyman.com/2012/01/20/range_address_from_number_to_letter/</link>
      <pubDate>Fri, 20 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>http://jnyman.com/2012/01/20/range_address_from_number_to_letter/</guid>
      <description>Sometimes, before I realize it (and, Iâ€™m sure, others too) I do a bunch of work, that turns out that I didnâ€™t need to do before. The RangeAddress function that I created is a perfect example of this. This function goes from a column number to a letter and returns the whole string range address. I started off with someones elseâ€™s code. I then made it work for me. Their code only worked for Excel 2003 and below.</description>
    </item>
    
    <item>
      <title>Find Last Cell</title>
      <link>http://jnyman.com/2012/01/13/find_last_cell/</link>
      <pubDate>Fri, 13 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>http://jnyman.com/2012/01/13/find_last_cell/</guid>
      <description>Finding the last cell is a common thing people look for when they are coding in VBA. I made a function that does this automatically for me when I am looking for the last cell. In conjunction with the RRange function this simplifies the programming life for VBA significantly.
Heres some example code on how to use the function FindEnd.
Sub FindEndExamples() Dim l As Long &#39;Find last row in column 2 on current worksheet l = FindEnd(2) Debug.</description>
    </item>
    
    <item>
      <title>Get Range from Row &amp; Column Numbers</title>
      <link>http://jnyman.com/2012/01/12/get_range_from_row_and_column_numbers/</link>
      <pubDate>Thu, 12 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>http://jnyman.com/2012/01/12/get_range_from_row_and_column_numbers/</guid>
      <description>Before I created a quite elaborate code to get the column letter from the column numbers. It turns out that it was much easier than I had thought before. So in the code below Iâ€™ve simplified it considerably by using the Cells method.
In the function below I use a function called FindEnd.
&#39;RRAnge &#39; -------------------------------------------------------------- &#39;Comments: This Function returns the desired range. &#39; &#39;Arguments: lRow First cell row number. &#39; lCol First cell column number.</description>
    </item>
    
    <item>
      <title>Import Data from Excel to VBA</title>
      <link>http://jnyman.com/2012/01/04/import_data_from_excel_to_vba/</link>
      <pubDate>Wed, 04 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>http://jnyman.com/2012/01/04/import_data_from_excel_to_vba/</guid>
      <description>I&amp;rsquo;ve always wanted a function that can get me data from excel in a format that will always be the same. Sometimes I get the data and I expect a 2D variant array but instead get a string or double value. So I created a function to make it easy for myself, getting the same format that I expect.
&#39;ImportExcelData &#39; -------------------------------------------------------------- &#39;Comments: This Function imports excel data in different formats (1D, 2D, or String).</description>
    </item>
    
  </channel>
</rss>
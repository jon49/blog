<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code on JNyman.com</title>
    <link>https://jnyman.com/tags/code/</link>
    <description>Recent content in Code on JNyman.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 05 Dec 2012 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jnyman.com/tags/code/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>List of Excel Functions - Code To Use List</title>
      <link>https://jnyman.com/2012/12/05/list_of_excel_functions_code_to_use_list/</link>
      <pubDate>Wed, 05 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/12/05/list_of_excel_functions_code_to_use_list/</guid>
      <description>I saw a few people were downloading my list of Excel functions that I created. I thought it might be useful show the code that I use to get that data to a manageable format. Although the code is written in VB.NET it should be easily converted to VBA.
[wpdm_file id=3]
I use a simple structure (type in VBA) for the data.
Private Structure ExcelFunctionInfo Dim Name As String Dim Category As String Dim ExcelVersion As Integer Dim Description As String Dim Syntax As String Dim URL As String End Structure  I then just loop through the data in the string that was gotten from the text file.</description>
    </item>
    
    <item>
      <title>Sheet Exists</title>
      <link>https://jnyman.com/2012/09/13/sheet_exists/</link>
      <pubDate>Thu, 13 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/09/13/sheet_exists/</guid>
      <description>I was looking at Siddharth Rout&amp;rsquo;s new blog (Adding/Deleting Sheets to the Excel File) and realized that I haven&amp;rsquo;t posted my version of sheet exists. Mine probably does too much per Code Complete standards, but it is nice not to have to think of multiple.
If I were to refactor this code I would take out the code for the charts and probably just make it work only for checking if the sheet exists and adding a new sheet if it doesn&amp;rsquo;t.</description>
    </item>
    
    <item>
      <title>Generic Types</title>
      <link>https://jnyman.com/2012/06/18/generic_types/</link>
      <pubDate>Mon, 18 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/06/18/generic_types/</guid>
      <description>Last time we went over Overloading function in .NET. Today we&amp;rsquo;ll take a look at generics. I had been wondering how to do this for some time, seeing that I could do it with Microsoft&amp;rsquo;s built in code. I have to say, it is pretty nice and really makes coding much easier and cleaner.
A generic type is a single programming element that adapts to perform the same functionality for a variety of data types.</description>
    </item>
    
    <item>
      <title>Overloading in VB.NET</title>
      <link>https://jnyman.com/2012/06/07/overloading_in_vb_net/</link>
      <pubDate>Thu, 07 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/06/07/overloading_in_vb_net/</guid>
      <description>In previous posts I showed how you can use Extensions and Lambda Expressions to make some pretty versatile functions in .NET. Today I&amp;rsquo;ll show a method that really helps for the readability and organization of your code.
In the past we used optional parameters to make a function do multiple things. We even needed to make new functions that did pretty much the same thing in order to make it better organized.</description>
    </item>
    
    <item>
      <title>A Class Made from a Shaped Recordset</title>
      <link>https://jnyman.com/2012/05/11/a_class_made_from_a_shaped_recordset/</link>
      <pubDate>Fri, 11 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/05/11/a_class_made_from_a_shaped_recordset/</guid>
      <description>Here&amp;rsquo;s some fun code that I worked on a while back. This disconnected record set is what you call a shaped record set, created on the fly. It is a pretty complex class all wrapped in one nice little bundle. Unfortunately it goes terribly slow. Creating a class with the dictionary object in the Scripting Runtime Object Library should be the fastest, if you&amp;rsquo;re looking for speed.
Pretty crazy looking code, but pretty elegant once you get used to looking at code like that, unfortunately it&amp;rsquo;s not very using for creating classes on the fly, or even instead of regular classes (It would make making classes a synch!</description>
    </item>
    
    <item>
      <title>Lambda Expressions</title>
      <link>https://jnyman.com/2012/04/14/lambda_expressions_an_introduction/</link>
      <pubDate>Sat, 14 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/04/14/lambda_expressions_an_introduction/</guid>
      <description>Another thing that I like about programming in .NET beyond LINQ and Extensions is lambda expressions. (It should be noted that LINQ, Extensions, and lambda expressions are all related). Lambda expressions are &amp;ldquo;are callable entities that are defined within a function, you can return a lambda expression from a function and you can pass lambda expressions to other functions.&amp;rdquo; Lambda expressions come with the System.Core library, so no need to add a reference nor Imports at the top of your class.</description>
    </item>
    
    <item>
      <title>Linq: An Introduction</title>
      <link>https://jnyman.com/2012/04/11/linq_an_introduction/</link>
      <pubDate>Wed, 11 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/04/11/linq_an_introduction/</guid>
      <description>Another thing that I like about programming in VB.NET beyond Extensions is LINQ. LINQ is similar to SQL in structure - which is &amp;ldquo;a declarative programming paradigm that expresses the logic of a computation without describing its control flow.&amp;rdquo; So LINQ takes declarative paradigm and applies it to object oriented programming.
What&amp;rsquo;s so great about this? Well, it does slow the program down, but it speeds up the the programming process, puts the information in a form that is more descriptive (although that is no excuse not to thoroughly comment your code), and makes programming easier.</description>
    </item>
    
    <item>
      <title>Extensions in VB.NET</title>
      <link>https://jnyman.com/2012/04/05/extensions_in_vb_net/</link>
      <pubDate>Thu, 05 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/04/05/extensions_in_vb_net/</guid>
      <description>Learning how to use VB.NET can be quite the leap from VBA, but once you start learning VB.NET and have much more control it’s difficult to want to go back to VBA.
One of the things that I like about VB.NET is methods. Extensions allow you to extend data type methods. So, let’s say you have a String data type (Strings in VB.NET are like a class in and of themselves) and you want it to have the method of appending “]” at the end.</description>
    </item>
    
    <item>
      <title>The Problems Of Copy/Pasting Code</title>
      <link>https://jnyman.com/2012/03/14/the_problems_of_copy_pasting_code/</link>
      <pubDate>Wed, 14 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/03/14/the_problems_of_copy_pasting_code/</guid>
      <description>Copying and pasting is great for coding, but sometimes it can be pretty silly if you make a mistake in the code. Here’s a triple copy/paste fail (the values should be set to true):
Public Sub SheetActivate_Dashboard(ByVal sh As Object) Try gXLApp.EnableEvents = False OpenTimeStamp() Finally gXLApp.EnableEvents = False End Try End Sub Public Sub SheetDeActivate_Dashboard(ByVal sh As Object) Try gXLApp.EnableEvents = False If Not gfTimeStamp Is Nothing Then gfTimeStamp.Visible = False gfTimeStamp.</description>
    </item>
    
    <item>
      <title>AdvancedFilter Class Part 3</title>
      <link>https://jnyman.com/2012/03/02/advancedfilter_class_part_3_creating_the_sub_class/</link>
      <pubDate>Fri, 02 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/03/02/advancedfilter_class_part_3_creating_the_sub_class/</guid>
      <description>In order to get the nice drop down menu we&amp;rsquo;ll need a second class I&amp;rsquo;ll call &amp;ldquo;SearchTerms.&amp;rdquo; This class is also necessary to store each individual search term entered into the class. Included in this class will be:  Search Term Header Header Operator Match Type 
&#39; SearchTerms &#39; Description: This class contains the search information. &#39; &#39; Authors: Jon Nyman, www.spreadsheetbudget.com &#39; &#39; Change Overview &#39; Date Comment &#39; -------------------------------------------------------------- &#39; 03/02/2012 Initial version &#39; Option Explicit &#39;--------------------------------------------------------------- &#39;Class Variable Declarations &#39;--------------------------------------------------------------- Private msSearchTerm As String Private msHeader As String Private meHeaderOperator As HeaderOperator Private meMatchType As MatchType &#39;--------------------------------------------------------------- &#39;Class Property Procedures &#39;--------------------------------------------------------------- Property Get SearchTerm() As String SearchTerm = msSearchTerm End Property Property Let SearchTerm(ByVal sItem As String) msSearchTerm = sItem End Property Property Get Header() As String Header = msHeader End Property Property Let Header(ByVal sHeader As String) msHeader = sHeader End Property Property Get Header_Operator() As HeaderOperator Header_Operator = meHeaderOperator End Property Property Let Header_Operator(ByVal eHeaderOperator As HeaderOperator) meHeaderOperator = eHeaderOperator End Property Property Get Match_Type() As MatchType Match_Type = meMatchType End Property Property Let Match_Type(ByVal eMatchType As MatchType) meMatchType = eMatchType End Property  </description>
    </item>
    
    <item>
      <title>AdvancedFilter Class Part 2</title>
      <link>https://jnyman.com/2012/02/15/advancedfilter_class_part_2_determining_what_options_we_want/</link>
      <pubDate>Wed, 15 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/02/15/advancedfilter_class_part_2_determining_what_options_we_want/</guid>
      <description>The first thing we’ll want to do is determine what macro options we would like in the class.
The options I currently have are:
 Range to filter (optional – can use current range instead). Filter location (optional – if you are using an add-in then you can place in there, otherwise can put in temporary sheet). Filter action (copy to new range or filter in place (default)). Get unique items from a column (will need to use different method than AdvancedFilter).</description>
    </item>
    
    <item>
      <title>Wrapping a Class Around the AdvancedFilter Method</title>
      <link>https://jnyman.com/2012/02/10/wrapping_a_class_around_the_advancedfilter_method/</link>
      <pubDate>Fri, 10 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/02/10/wrapping_a_class_around_the_advancedfilter_method/</guid>
      <description>Classes are a tool in object-oriented programming that make programming much simpler. One class that I have developed in VBA is a class that makes using the AdvancedFilter method extremely easy and useful. In fact, I like it so much that I stopped using the regular find method. In the coming weeks I will demonstrate how this was done.
 This is how the AdvancedFilter method works:   Use a predefined range to filter.</description>
    </item>
    
    <item>
      <title>Find Last Cell</title>
      <link>https://jnyman.com/2012/01/13/find_last_cell/</link>
      <pubDate>Fri, 13 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/01/13/find_last_cell/</guid>
      <description>Finding the last cell is a common thing people look for when they are coding in VBA. I made a function that does this automatically for me when I am looking for the last cell. In conjunction with the RRange function this simplifies the programming life for VBA significantly.
Heres some example code on how to use the function FindEnd.
Sub FindEndExamples() Dim l As Long &#39;Find last row in column 2 on current worksheet l = FindEnd(2) Debug.</description>
    </item>
    
    <item>
      <title>Import Data from Excel to VBA</title>
      <link>https://jnyman.com/2012/01/04/import_data_from_excel_to_vba/</link>
      <pubDate>Wed, 04 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/01/04/import_data_from_excel_to_vba/</guid>
      <description>I&amp;rsquo;ve always wanted a function that can get me data from excel in a format that will always be the same. Sometimes I get the data and I expect a 2D variant array but instead get a string or double value. So I created a function to make it easy for myself, getting the same format that I expect.
&#39;ImportExcelData &#39; -------------------------------------------------------------- &#39;Comments: This Function imports excel data in different formats (1D, 2D, or String).</description>
    </item>
    
  </channel>
</rss>
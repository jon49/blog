<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Async on JNyman.com</title>
    <link>https://jnyman.com/tags/async/</link>
    <description>Recent content in Async on JNyman.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 26 Jun 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jnyman.com/tags/async/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JavaScript-Style Promises in F#</title>
      <link>https://jnyman.com/2016/06/26/js_style_promises_in_fsharp/</link>
      <pubDate>Sun, 26 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2016/06/26/js_style_promises_in_fsharp/</guid>
      <description>Working in enterprise level back end software often times I need to get information from many different sources. When you have enough of these sources the time it takes to get all the information can really add up. That&amp;rsquo;s when F# async work flow really comes in handy. Except, there is a gotcha.
Let&amp;rsquo;s say we have two sources we need to fetch data from:
let myData () = async { let!</description>
    </item>
    
    <item>
      <title>Attempted to Read or Write Protected Memory</title>
      <link>https://jnyman.com/2013/02/12/attempted_to_read_or_write_protected_memory/</link>
      <pubDate>Tue, 12 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2013/02/12/attempted_to_read_or_write_protected_memory/</guid>
      <description>I&amp;rsquo;ve been working on switching over to a &amp;ldquo;new&amp;rdquo; machine (more on that in a new post). In the process my time card program stopped working with the following error:
System.AccessViolationException was unhandled Message: Attempted to read or write protected memory. This is often an indication that other memory is corrupt. Unfortunately this error doesn&amp;rsquo;t show up until well after it occurs. So you need to make some educated guesses as to where it is coming from.</description>
    </item>
    
  </channel>
</rss>
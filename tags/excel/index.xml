<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Excel on JNyman.com</title>
    <link>https://jnyman.com/tags/excel/</link>
    <description>Recent content in Excel on JNyman.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 07 Jun 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jnyman.com/tags/excel/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JavaScript</title>
      <link>https://jnyman.com/2014/06/07/javascript/</link>
      <pubDate>Sat, 07 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2014/06/07/javascript/</guid>
      <description>I’ve jumped ship from Excel programming over to JavaScript (in a functional manner). I’ve also gone the way of Linux away from Windows. I love Excel and its power. But I see the writing on the wall and am moving to where I can hopefully get some work and starting making some moolah. You can follow my new blog over at http://thisisafiller.ghoster.io/.
If anyone is interested in the products I’ve made let me know how you like them and send me an e-mail.</description>
    </item>
    
    <item>
      <title>Zipping Files with VBA and USB Drives</title>
      <link>https://jnyman.com/2013/08/19/zipping_files_with_vba_and_usb_drives/</link>
      <pubDate>Mon, 19 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2013/08/19/zipping_files_with_vba_and_usb_drives/</guid>
      <description>I used Ron de Bruin&amp;rsquo;s file zipping (and sending) code with Excel. It works great with a few tweaks. Unfortunately when someone is using a USB drive with their workbook on it it fails to work. So warning: Make sure the users are using it on the main computer when trouble shooting!</description>
    </item>
    
    <item>
      <title>SUMIFS vs MATCH &amp; INDEX</title>
      <link>https://jnyman.com/2013/03/14/sumifs_vs_match_index/</link>
      <pubDate>Thu, 14 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2013/03/14/sumifs_vs_match_index/</guid>
      <description>I have one Time Card template setup with SUMIFS (used for Excel 2007 and above templates) and one set up with MATCH/INDEX (used for my 2003 and below templates). I tested the calculation speeds for each in Excel 2013 (preview) on Windows 8.
Here’s the VBA test code:
Sub test() Dim dTimer As Double Dim iLoops As Integer, iTotalIterations As Integer Dim wksStage As Worksheet Set wksStage = ThisWorkbook.Worksheets(&amp;quot;Staging Area&amp;quot;) iTotalIterations = 1 dTimer = Timer() For iLoops = 0 To iTotalIterations wksStage.</description>
    </item>
    
    <item>
      <title>Excel Extensions</title>
      <link>https://jnyman.com/2013/02/25/excel_extensions/</link>
      <pubDate>Mon, 25 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2013/02/25/excel_extensions/</guid>
      <description>Excel extensions extend the range object to use LinqTo2dArray (see also Codeplex). It also includes other extensions.
 RowsCount: Count total rows in all areas. Parse: Parse congruent range into an object by row-object arrays.  This doesn’t necessarily need to be congruent, in the future I may make it so it skips to different areas in the range.  ToArray: Copies the elements of the 2D object array row wise to a new array of the specified element type and length.</description>
    </item>
    
    <item>
      <title>LinqTo2dArray</title>
      <link>https://jnyman.com/2013/02/25/linqto2darray/</link>
      <pubDate>Mon, 25 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2013/02/25/linqto2darray/</guid>
      <description>LinqTo2dArray written in C# (to allow iteration over the rows). Also found on CodePlex.
 Parse will take a 2D Array (not necessarily zero based) and load it into a class. Parse 2D object array into a class row wise. Compose will create 2D object array from enumerable type. Copies the elements of the 2D object array row wise to a new array of the specified element type and length.  using System; using System.</description>
    </item>
    
    <item>
      <title>Max Write to Excel (2003) in Array</title>
      <link>https://jnyman.com/2013/01/01/max_write_to_excel_2003_in_array/</link>
      <pubDate>Tue, 01 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2013/01/01/max_write_to_excel_2003_in_array/</guid>
      <description>I normally don’t deal with very long strings. But I’m working on a project that requires storing a text file in Excel that I can later access (it would be nice just to embed it but Excel doesn’t like viruses – which makes me have to just store it in a worksheet).
So what is the max string length in an array write to an Excel range?
911
Seems kind of random but that is the number.</description>
    </item>
    
    <item>
      <title>AdvancedFilter Wrapper Engine</title>
      <link>https://jnyman.com/2012/12/18/advancedfilter_wrapper_engine_for_vba_enthusiasts/</link>
      <pubDate>Tue, 18 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/12/18/advancedfilter_wrapper_engine_for_vba_enthusiasts/</guid>
      <description>A while back ago I promised to produce my engine for the advancedfilter wrapper. Well, at the prodding of Hugo I finally put it together. I took the code from my VB.NET project and converted it to VBA. Man, that reminds of why I love .NET so much! If you ever get a chance to learn .NET of VBA definitely take the opportunity. At first it is difficult but then it gets to the point where you don&amp;rsquo;t want to go back.</description>
    </item>
    
    <item>
      <title>List of Excel Functions - Code To Use List</title>
      <link>https://jnyman.com/2012/12/05/list_of_excel_functions_code_to_use_list/</link>
      <pubDate>Wed, 05 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/12/05/list_of_excel_functions_code_to_use_list/</guid>
      <description>I saw a few people were downloading my list of Excel functions that I created. I thought it might be useful show the code that I use to get that data to a manageable format. Although the code is written in VB.NET it should be easily converted to VBA.
[wpdm_file id=3]
I use a simple structure (type in VBA) for the data.
Private Structure ExcelFunctionInfo Dim Name As String Dim Category As String Dim ExcelVersion As Integer Dim Description As String Dim Syntax As String Dim URL As String End Structure  I then just loop through the data in the string that was gotten from the text file.</description>
    </item>
    
    <item>
      <title>Scribble Filter (For Excel)</title>
      <link>https://jnyman.com/2012/11/01/scribble_filter_for_excel_overview_part_4/</link>
      <pubDate>Thu, 01 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/11/01/scribble_filter_for_excel_overview_part_4/</guid>
      <description>Points discussed in video:
The scribble filter is a text wrapper for the Advanced Filter in Excel, making it easy to work with and adding new capabilities.  Use both {AVERAGE} function and Excel AVERAGE function @00:04 Click on Excel function with cursor to goto Excel&amp;rsquo;s function web page @01:18 Using ranges as a formula. @01:33 
 Scribble Filter Home Scribble Filter Help
Overview Part 1 Overview Part 2 Overview Part 3 Overview Part 4</description>
    </item>
    
    <item>
      <title>Scribble Filter: Installation &amp; Opening</title>
      <link>https://jnyman.com/2012/10/31/scribble_filter_installation_opening/</link>
      <pubDate>Wed, 31 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/10/31/scribble_filter_installation_opening/</guid>
      <description>The scribble filter is a text wrapper for the Advanced Filter in Excel, making it easy to work with and adding new capabilities.
Points discussed in video:
 Installing @00:06 Open Scribble Filter Dialog @00:30   Scribble Filter Home Scribble Filter Help</description>
    </item>
    
    <item>
      <title>Scribble Filter (For Excel)</title>
      <link>https://jnyman.com/2012/10/22/scribble_filter_for_excel_overview_part_2/</link>
      <pubDate>Mon, 22 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/10/22/scribble_filter_for_excel_overview_part_2/</guid>
      <description>Points discussed in video:
The scribble filter is a text wrapper for the Advanced Filter in Excel, making it easy to work with and adding new capabilities.
 Filter in place @00:08 Copy filtered data to different worksheet @00:32 Chaining filters @00:57 Special Report (Sum column by unique values in different column) @1:11 Overwriting previous reports @01:37   Scribble Filter Home Scribble Filter Help
Overview Part 1 Overview Part 2 Overview Part 3 Overview Part 4</description>
    </item>
    
    <item>
      <title>Scribble Filter (For Excel) Overview Part 3</title>
      <link>https://jnyman.com/2012/10/22/scribble_filter_for_excel_overview_part_3/</link>
      <pubDate>Mon, 22 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/10/22/scribble_filter_for_excel_overview_part_3/</guid>
      <description>Points discussed in video:
The scribble filter is a text wrapper for the Advanced Filter in Excel, making it easy to work with and adding new capabilities.
 Special Functions Defined @00:04 Top or bottom (also purpose for chaining) @00:30 Top or bottom by percent @02:10 Above or below average @02:52  Scribble Filter Home
Scribble Filter Help
Overview Part 1
Overview Part 2
Overview Part 3
Overview Part 4</description>
    </item>
    
    <item>
      <title>Scribble Filter Overview Part 1</title>
      <link>https://jnyman.com/2012/10/15/scribble_filter_overview/</link>
      <pubDate>Mon, 15 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/10/15/scribble_filter_overview/</guid>
      <description>Points discussed in video:
The scribble filter is a wrapper for the Advanced Filter in Excel, making it easy to work with and adding new capabilities.
 To get the date spans right click on the left calendar button. Use tab or enter to get the first line from the drop down menu. Right click on buttons to get more options (e.g., right click on report button to set type of report to create: On separate sheet, preview, in place, chain).</description>
    </item>
    
    <item>
      <title>Sheet Exists</title>
      <link>https://jnyman.com/2012/09/13/sheet_exists/</link>
      <pubDate>Thu, 13 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/09/13/sheet_exists/</guid>
      <description>I was looking at Siddharth Rout&amp;rsquo;s new blog (Adding/Deleting Sheets to the Excel File) and realized that I haven&amp;rsquo;t posted my version of sheet exists. Mine probably does too much per Code Complete standards, but it is nice not to have to think of multiple.
If I were to refactor this code I would take out the code for the charts and probably just make it work only for checking if the sheet exists and adding a new sheet if it doesn&amp;rsquo;t.</description>
    </item>
    
    <item>
      <title>List of Excel Functions</title>
      <link>https://jnyman.com/2012/08/27/list_of_excel_functions/</link>
      <pubDate>Mon, 27 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/08/27/list_of_excel_functions/</guid>
      <description>For the advanced filter I need a list of Excel functions. There are lists, unfortunately I needed the list with the function parameters (syntax). I also wanted it by date. I have lists of just the functions for Excel 2003, 2007, and 2010 without the syntax. So I did some screen scraping of Microsoft&amp;rsquo;s list of Excel functions where I was able to get the function name, category, description, syntax, and website URL for that function.</description>
    </item>
    
    <item>
      <title>Using Pivot Tables as a Staging Resource</title>
      <link>https://jnyman.com/2012/06/19/using_pivot_tables_as_a_staging_resource/</link>
      <pubDate>Tue, 19 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/06/19/using_pivot_tables_as_a_staging_resource/</guid>
      <description>When I originally created the Excel time card dashboard I didn&amp;rsquo;t want to back my data with any pivot tables. I soon found though that it slowed the calculations so much that I needed to use pivot tables just to make it bearable to work with the dashboard. The reason I didn&amp;rsquo;t want to use pivot tables was because they are prone to do wacky and unexpected things.
So, what I have done is I automated some of the code to fix errors (like make sure that the &amp;ldquo;wksPivotTable&amp;rdquo; has a column for months and years and that it is in order).</description>
    </item>
    
    <item>
      <title>Why UDF Array Functions are Faster</title>
      <link>https://jnyman.com/2012/03/29/why_udf_array_functions_are_faster/</link>
      <pubDate>Thu, 29 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/03/29/why_udf_array_functions_are_faster/</guid>
      <description>Over at FastExcel the answer was given why UDF arrays go faster to the question I had on why UDF array formulas are faster than regular formulas. I had forgotten about this post that he had written.
Here&amp;rsquo;s the answer that he gives. Check out his blog post to see more of the details of why this is. You can break down the time taken by a VBA UDF into these components:  Overhead time to call the UDF.</description>
    </item>
    
    <item>
      <title>Calculation Efficiency</title>
      <link>https://jnyman.com/2012/03/28/calculation_effeciency_array_formulas/</link>
      <pubDate>Wed, 28 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/03/28/calculation_effeciency_array_formulas/</guid>
      <description>Chandoo had some posts on speeding up Excel worksheets, one of the posts focuses on formulas and another he let the general readers make their suggestions. I made the suggestion that people use array formulas. But most of the other suggestions said not to use array formulas since they slow down your spreadsheet. Needless to say, I was a bit confused, I have seen quite the performance boost from using array formulas.</description>
    </item>
    
    <item>
      <title>Updates</title>
      <link>https://jnyman.com/2012/03/23/updates/</link>
      <pubDate>Fri, 23 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/03/23/updates/</guid>
      <description>AdvancedFilter Class
Just so everyone knows. I&amp;rsquo;m going to postpone the AdvancedFilter series until I start working on it in .NET, that way I&amp;rsquo;ll remember more about what I was doing before. I&amp;rsquo;ll start working on that when I finish up the Time Card application and the Chart Manipulator.
Time Card
I probably won&amp;rsquo;t be finishing up the beta version of the time card until early April. I&amp;rsquo;m currently debugging the UDF function &amp;ldquo;SumDate&amp;rdquo; which is pretty central to the time card.</description>
    </item>
    
    <item>
      <title>AdvancedFilter Class Part 2</title>
      <link>https://jnyman.com/2012/02/15/advancedfilter_class_part_2_determining_what_options_we_want/</link>
      <pubDate>Wed, 15 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/02/15/advancedfilter_class_part_2_determining_what_options_we_want/</guid>
      <description>The first thing we’ll want to do is determine what macro options we would like in the class.
The options I currently have are:
 Range to filter (optional – can use current range instead). Filter location (optional – if you are using an add-in then you can place in there, otherwise can put in temporary sheet). Filter action (copy to new range or filter in place (default)). Get unique items from a column (will need to use different method than AdvancedFilter).</description>
    </item>
    
    <item>
      <title>Wrapping a Class Around the AdvancedFilter Method</title>
      <link>https://jnyman.com/2012/02/10/wrapping_a_class_around_the_advancedfilter_method/</link>
      <pubDate>Fri, 10 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/02/10/wrapping_a_class_around_the_advancedfilter_method/</guid>
      <description>Classes are a tool in object-oriented programming that make programming much simpler. One class that I have developed in VBA is a class that makes using the AdvancedFilter method extremely easy and useful. In fact, I like it so much that I stopped using the regular find method. In the coming weeks I will demonstrate how this was done.
 This is how the AdvancedFilter method works:   Use a predefined range to filter.</description>
    </item>
    
    <item>
      <title>Distributing Add-ins via Installer</title>
      <link>https://jnyman.com/2012/01/27/distributing_add_ins_via_installer/</link>
      <pubDate>Fri, 27 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/01/27/distributing_add_ins_via_installer/</guid>
      <description>Recently I needed to create an installer for my add-ins using Inno Setup installer. Inno Setup is a free ware professional installer. It lets you use Pascal to create special code to help you install the add ins.
Luckily, over at Dutch Gemini’s website he has helped with plenty of the code to get there. Very well done, I might add.
It looks like he uses a single add-in file for Excel 2003 and below and Excel 2007 and above (for ribbon purposes).</description>
    </item>
    
    <item>
      <title>.NET and Modeless Forms</title>
      <link>https://jnyman.com/2012/01/23/dot_net_and_modeless_forms_in_excel/</link>
      <pubDate>Mon, 23 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/01/23/dot_net_and_modeless_forms_in_excel/</guid>
      <description>When I was doing some programming in VB.NET (for the Time Stamp program), I tried putting a modeless form in Excel. It came up as a new window in the task bar but then wouldn&amp;rsquo;t actually show on the screen. When I did a modal form it would show on the screen but also in the task bar.
.NET let&amp;rsquo;s you choose the parent window of your form. I found some code on StackOverflow in C# that gives you the proper owner window in IWin32Window form.</description>
    </item>
    
    <item>
      <title>Range Address from Number to Letter</title>
      <link>https://jnyman.com/2012/01/20/range_address_from_number_to_letter/</link>
      <pubDate>Fri, 20 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/01/20/range_address_from_number_to_letter/</guid>
      <description>Sometimes, before I realize it (and, I’m sure, others too) I do a bunch of work, that turns out that I didn’t need to do before. The RangeAddress function that I created is a perfect example of this. This function goes from a column number to a letter and returns the whole string range address. I started off with someones else’s code. I then made it work for me. Their code only worked for Excel 2003 and below.</description>
    </item>
    
    <item>
      <title>Find Last Cell</title>
      <link>https://jnyman.com/2012/01/13/find_last_cell/</link>
      <pubDate>Fri, 13 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/01/13/find_last_cell/</guid>
      <description>Finding the last cell is a common thing people look for when they are coding in VBA. I made a function that does this automatically for me when I am looking for the last cell. In conjunction with the RRange function this simplifies the programming life for VBA significantly.
Heres some example code on how to use the function FindEnd.
Sub FindEndExamples() Dim l As Long &#39;Find last row in column 2 on current worksheet l = FindEnd(2) Debug.</description>
    </item>
    
    <item>
      <title>Get Range from Row &amp; Column Numbers</title>
      <link>https://jnyman.com/2012/01/12/get_range_from_row_and_column_numbers/</link>
      <pubDate>Thu, 12 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/01/12/get_range_from_row_and_column_numbers/</guid>
      <description>Before I created a quite elaborate code to get the column letter from the column numbers. It turns out that it was much easier than I had thought before. So in the code below I’ve simplified it considerably by using the Cells method.
In the function below I use a function called FindEnd.
&#39;RRAnge &#39; -------------------------------------------------------------- &#39;Comments: This Function returns the desired range. &#39; &#39;Arguments: lRow First cell row number. &#39; lCol First cell column number.</description>
    </item>
    
    <item>
      <title>Import Data from Excel to VBA</title>
      <link>https://jnyman.com/2012/01/04/import_data_from_excel_to_vba/</link>
      <pubDate>Wed, 04 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/01/04/import_data_from_excel_to_vba/</guid>
      <description>I&amp;rsquo;ve always wanted a function that can get me data from excel in a format that will always be the same. Sometimes I get the data and I expect a 2D variant array but instead get a string or double value. So I created a function to make it easy for myself, getting the same format that I expect.
&#39;ImportExcelData &#39; -------------------------------------------------------------- &#39;Comments: This Function imports excel data in different formats (1D, 2D, or String).</description>
    </item>
    
  </channel>
</rss>
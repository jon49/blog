<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vb.net on JNyman.com</title>
    <link>https://jnyman.com/tags/vb.net/</link>
    <description>Recent content in Vb.net on JNyman.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 12 Feb 2013 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jnyman.com/tags/vb.net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Attempted to Read or Write Protected Memory</title>
      <link>https://jnyman.com/2013/02/12/attempted_to_read_or_write_protected_memory/</link>
      <pubDate>Tue, 12 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2013/02/12/attempted_to_read_or_write_protected_memory/</guid>
      <description>I&amp;rsquo;ve been working on switching over to a &amp;ldquo;new&amp;rdquo; machine (more on that in a new post). In the process my time card program stopped working with the following error:
System.AccessViolationException was unhandled Message: Attempted to read or write protected memory. This is often an indication that other memory is corrupt. Unfortunately this error doesn&amp;rsquo;t show up until well after it occurs. So you need to make some educated guesses as to where it is coming from.</description>
    </item>
    
    <item>
      <title>Excel Queries</title>
      <link>https://jnyman.com/2012/12/03/excel_queries/</link>
      <pubDate>Mon, 03 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/12/03/excel_queries/</guid>
      <description>I came across some nice libraries to use while programming to query Excel. Right now I’m am using the standard COM interface for my projects, which is fine for small ranges (which is true for most users – I would assume). But for large ranges I would need something more powerful.
LinqToExcel
LinqToExcel appears to be a great project for using a Linq interface to query Excel (but not write to Excel).</description>
    </item>
    
    <item>
      <title>XML Comments</title>
      <link>https://jnyman.com/2012/08/27/xml_comments/</link>
      <pubDate>Mon, 27 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/08/27/xml_comments/</guid>
      <description>Comment headers above procedures can be convenient when you want to know what a function does and what the parameters are for – especially if they weren’t named with enough description. Luckily Visual Studio provides a way to do these comments easily and it gives you intellisense for your own functions! They are called XML comments. All you need to do is put in three comment markers (‘) and then it will fill in everything for you (if you already have the procedure/parameters filled in).</description>
    </item>
    
    <item>
      <title>Algorithm Resources</title>
      <link>https://jnyman.com/2012/07/16/algorithm_resources/</link>
      <pubDate>Mon, 16 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/07/16/algorithm_resources/</guid>
      <description>Introduction I was reading through Code Complete a classic coding book that is widely considered one of the best practical guides to programming, Steve McConnell’s original CODE COMPLETE has been helping developers write better software for more than a decade. And he mentioned algorithm books. What, there exists algorithm books? You mean I don&amp;rsquo;t need to come up with this code all by myself? Combined with the internet to figure out what exactly these algorithms are called, they could be a huge help.</description>
    </item>
    
    <item>
      <title>Generic Types</title>
      <link>https://jnyman.com/2012/06/18/generic_types/</link>
      <pubDate>Mon, 18 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/06/18/generic_types/</guid>
      <description>Last time we went over Overloading function in .NET. Today we&amp;rsquo;ll take a look at generics. I had been wondering how to do this for some time, seeing that I could do it with Microsoft&amp;rsquo;s built in code. I have to say, it is pretty nice and really makes coding much easier and cleaner.
A generic type is a single programming element that adapts to perform the same functionality for a variety of data types.</description>
    </item>
    
    <item>
      <title>Overloading in VB.NET</title>
      <link>https://jnyman.com/2012/06/07/overloading_in_vb_net/</link>
      <pubDate>Thu, 07 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/06/07/overloading_in_vb_net/</guid>
      <description>In previous posts I showed how you can use Extensions and Lambda Expressions to make some pretty versatile functions in .NET. Today I&amp;rsquo;ll show a method that really helps for the readability and organization of your code.
In the past we used optional parameters to make a function do multiple things. We even needed to make new functions that did pretty much the same thing in order to make it better organized.</description>
    </item>
    
    <item>
      <title>Lambda Expressions</title>
      <link>https://jnyman.com/2012/04/14/lambda_expressions_an_introduction/</link>
      <pubDate>Sat, 14 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/04/14/lambda_expressions_an_introduction/</guid>
      <description>Another thing that I like about programming in .NET beyond LINQ and Extensions is lambda expressions. (It should be noted that LINQ, Extensions, and lambda expressions are all related). Lambda expressions are &amp;ldquo;are callable entities that are defined within a function, you can return a lambda expression from a function and you can pass lambda expressions to other functions.&amp;rdquo; Lambda expressions come with the System.Core library, so no need to add a reference nor Imports at the top of your class.</description>
    </item>
    
    <item>
      <title>Linq: An Introduction</title>
      <link>https://jnyman.com/2012/04/11/linq_an_introduction/</link>
      <pubDate>Wed, 11 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/04/11/linq_an_introduction/</guid>
      <description>Another thing that I like about programming in VB.NET beyond Extensions is LINQ. LINQ is similar to SQL in structure - which is &amp;ldquo;a declarative programming paradigm that expresses the logic of a computation without describing its control flow.&amp;rdquo; So LINQ takes declarative paradigm and applies it to object oriented programming.
What&amp;rsquo;s so great about this? Well, it does slow the program down, but it speeds up the the programming process, puts the information in a form that is more descriptive (although that is no excuse not to thoroughly comment your code), and makes programming easier.</description>
    </item>
    
    <item>
      <title>Extensions in VB.NET</title>
      <link>https://jnyman.com/2012/04/05/extensions_in_vb_net/</link>
      <pubDate>Thu, 05 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2012/04/05/extensions_in_vb_net/</guid>
      <description>Learning how to use VB.NET can be quite the leap from VBA, but once you start learning VB.NET and have much more control it’s difficult to want to go back to VBA.
One of the things that I like about VB.NET is methods. Extensions allow you to extend data type methods. So, let’s say you have a String data type (Strings in VB.NET are like a class in and of themselves) and you want it to have the method of appending “]” at the end.</description>
    </item>
    
  </channel>
</rss>
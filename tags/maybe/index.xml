<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Maybe on JNyman.com</title>
    <link>https://jnyman.com/tags/maybe/</link>
    <description>Recent content in Maybe on JNyman.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 13 May 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jnyman.com/tags/maybe/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Notes On Functional Programming</title>
      <link>https://jnyman.com/2014/05/13/functional_programming_for_non_mathematicians/</link>
      <pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://jnyman.com/2014/05/13/functional_programming_for_non_mathematicians/</guid>
      <description>Patterns for the Non-Mathematician with Brian Lonsdorf Lenses Using lenses for composable/polymorphic model manipulation.
E.g.,
var user = {id:1, name:{first:&#39;doris&#39;, last:&#39;day&#39;}} var L = makeLenses([&#39;name&#39;, &#39;first&#39;]) var firstNameChar = compose(L.name, L.first, _1) over(firstNameChar, toUpperCase, user) //=&amp;gt; {id:1, name:{first:&#39;Doris&#39;, last:&#39;day&#39;}}  Maybe Use Maybe (Haskell) types (Option types in bilby.js / Scala style) to make composition easier. This works with fmap (functor maps). Returns resultant option.
Error Handling (Either) Either(&#39;need an int&#39;, 3) //=&amp;gt; Right(3) Either(&#39;need an int&#39;, undefined) //=&amp;gt; Left(&#39;need an int&#39;) fmap(function(x){return x+1;}, Right(2)) //=&amp;gt; Right(3) fmap(function(x){return x+1;}, Left(&#39;need an int&#39;)) //=&amp;gt; Left(&#39;need an int&#39;) compose(fmap(f), Either(error))  Future Values I&amp;rsquo;ll have to come back to this one later when I use it more.</description>
    </item>
    
  </channel>
</rss>